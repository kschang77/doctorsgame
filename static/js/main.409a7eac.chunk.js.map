{"version":3,"sources":["CharacterCard.js","Wrapper.js","Row.js","Col.js","Navbar.js","Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","Clicked","onClick","handleClick","id","alt","name","src","image","Wrapper","children","Row","fluid","Col","size","split","map","join","Navbar","currentScore","highScore","Jumbotron","App","state","characters","setState","alert","getAlertNotes","shuffleArray","handleScore","actor","notes","hideOverlay","title","info","onConfirm","hideAlert","getAlertNotMax","success","length","getAlertMax","getAlertTryAgain","forEach","element","clicked","handleIncrement","resetGame","shuffledArr","shuffle","console","log","array","tempValue","randomIndex","currentIndex","Math","floor","random","this","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.409a7eac.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CharacterCard(props) {\n  return (\n    <div className={\"card \" + (props.Clicked ? \"animate\" : \"\")} onClick={() => props.handleClick(props.id)} >\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"img-content\">\n        <p>\n          Doctor {props.name}\n        </p>\n        {/* <p>\n          <strong>Actor: </strong>{props.actor}\n        </p> */}\n      </div>\n    </div >\n  )\n}\n\nexport default CharacterCard;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper container-fluid m-0 p-0\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\n\r\nfunction Col(props) {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return <div className={size} {...props} />;\r\n}\r\n\r\nexport default Col;\r\n","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <header className=\"container-fluid fixed-top\" >\r\n      <div className=\"row\">\r\n        <h1 className=\"col-sm-8\">Star Trek Doctors Game</h1>\r\n        <nav className=\"col-sm-4\">\r\n          <p>Score: <span>{props.currentScore}</span></p> &nbsp;&nbsp;&nbsp;\r\n          <p>Top Score: <span>{props.highScore}</span> </p>\r\n          {props.children}\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container-fluid\">{props.children}\r\n        <p>Click on each doctor of Star Trek to learn about each one. For each unique doctor you clicked, you get one point. Board is shuffled after each click. Clicking a doctor twice would reset your score to zero.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport Wrapper from \"./Wrapper\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\nimport SweetAlert from 'react-bootstrap-sweetalert';\n// import Modal from \"./Modal\";\n\n\nclass App extends Component {\n  state = {\n    characters,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.setState({ alert: this.getAlertNotes() })\n    this.shuffleArray();\n    this.handleScore(id);\n  };\n\n  getAlertNotes = (actor, notes) => (\n    < SweetAlert\n      hideOverlay\n      title=\"More info\" info\n      onConfirm={() => this.hideAlert()}\n    >\n      <p>{notes}</p>\n\n      <p>Played by {actor}</p>\n\n    </SweetAlert >\n\n  )\n\n  // getAlertWrong = () => (\n  //   < SweetAlert\n  //     hideOverlay\n  //     warning\n  //     title=\"Oh No!\"\n  //     onConfirm={() => this.hideAlert()}\n  //   >\n  //     You clicked this one already!<br/>\n  //     Your high score is \" {this.state.currentScore}\n  //   </SweetAlert >\n  // )\n\n  getAlertNotMax = () => (\n    < SweetAlert\n      hideOverlay\n      success\n      title=\"Good job...\"\n      onConfirm={() => this.hideAlert()}\n    >\n      You have achieved a new high score of {this.state.currentScore}, but you did not achieve max score of {this.state.characters.length}. Try again...\n    </SweetAlert >\n  )\n\n  getAlertMax = () => (\n    < SweetAlert\n      hideOverlay\n      success\n      title=\"Congratulations!\"\n      onConfirm={() => this.hideAlert()}\n    >\n      You have mastered this game with the max score of {this.state.characters.length}\n    </SweetAlert >\n  )\n\n  getAlertTryAgain = () => (\n    < SweetAlert\n      hideOverlay\n      success\n      title=\"Okay\"\n      onConfirm={() => this.hideAlert()}\n    >\n      Your score was {this.state.currentScore} which failed to beat the previous high score. Please try again.\n    </SweetAlert >\n  )\n\n  hideAlert() {\n    console.log(\"hiding alert\")\n    this.setState({\n      alert: null\n    })\n  }\n\n  handleScore = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        // you got it! This was not clicked before!\n        element.clicked = true;\n        this.setState({\n          alert: this.getAlertNotes(element.actor, element.notes), Clicked: false\n        });\n        this.handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        // alert(\"Oh no! You clicked this one already! Your high score is \" + this.state.currentScore)\n        // this.setState({\n        //   alert: this.getAlertWrong()\n        // })\n        // // waah waah waah... wrong, sorry!\n        // update high score... if it is a high score\n        if (this.state.currentScore > this.state.highScore) {\n          // alert(\"You have achieved a new high score, but you did not achieve max score. Try again...\")\n          this.setState({\n            highScore: this.state.currentScore,\n            alert: this.getAlertNotMax()\n          });\n        } else {\n          // alert(\"You have not achieved a new high score. Try again...\")\n          this.setState({\n            alert: this.getAlertTryAgain()\n          })\n        }\n        //reset the rest\n        this.resetGame();\n      }\n    });\n  };\n\n  resetGame = () => {\n    this.setState({ currentScore: 0 });\n    this.setState({ Clicked: true });\n    this.state.characters.forEach(element => (element.clicked = false));\n  }\n\n  shuffleArray = () => {\n    // Shuffle the deck\n    const shuffledArr = this.shuffle(this.state.characters);\n    // Setting and this is now the \"current\" state\n    this.setState({ shuffledArr });\n  };\n\n  // increment store\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n    // stop game when score reaches maximum \n    console.log(\"CurScore = \", this.state.currentScore)\n    console.log(\"MaxScore = \", this.state.characters.length)\n    // note, state updates are async, but we can declare victory right here... \n    if ((this.state.currentScore + 1) === this.state.characters.length) {\n      // we've reached max score! Record that as the highscore\n      this.setState({\n        highScore: this.state.characters.length,\n        alert: this.getAlertMax()\n      });\n      // alert(`Congratulations! You have mastered this game with the max score of ${this.state.characters.length}`)\n      this.resetGame();\n    }\n  };\n\n  shuffle = array => {\n    var currentIndex = array.length,\n      tempValue,\n      randomIndex;\n\n    // while not done yet...\n    while (currentIndex !== 0) {\n      // pick one of the remaining ones...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // swap with current\n      tempValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = tempValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        <Row>\n          {this.state.characters.map(character => (\n            <Col size='xs-12 sm-6 md-4 lg-3' key={\"col\" + character.id}>\n              {this.state.alert}\n              <CharacterCard\n                Clicked={this.state.Clicked}\n                handleClick={this.handleClick}\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                actor={character.actor}\n                notes={character.notes}\n              />\n            </Col>\n\n          ))\n          }\n        </Row>\n      </Wrapper >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}